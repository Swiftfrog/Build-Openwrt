name: Build OpenWrt and Publish Release

on:
  push:
    tags:
      - 'v*' # 仅在推送带有 "v" 前缀的标签时触发
  workflow_dispatch: # 允许手动触发

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: 'v24.10.0'
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: OP.24.10.PW2
  DIY_P1_SH: OP.24.10.1.sh
  DIY_P2_SH: OP.24.10.2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true # 启用上传到 Release
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1. 检出代码库
      - name: Checkout
        uses: actions/checkout@main

      # 2. 清理磁盘空间
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # 3. 初始化环境
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install libfuse-dev $(curl -fsSL https://raw.githubusercontent.com/Swiftfrog/Build-Openwrt/refs/heads/main/depends.22.04)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      # 4. 克隆 OpenWrt 源码
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      # 5. 使用缓存加速编译
      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt

      # 6. 加载自定义 Feeds 和配置
      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      # 7. 更新和安装 Feeds
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      # 8. 加载自定义配置
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      # 9. 下载依赖包
      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 10. 编译固件
      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s

          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      # 11. 整理固件文件
      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

          echo "status=success" >> $GITHUB_OUTPUT

      # 12. 压缩固件文件（可选）
      - name: Compress firmware
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          tar -czf firmware.tar.gz -C ${{ env.FIRMWARE }} .
          echo "COMPRESSED_FIRMWARE=firmware.tar.gz" >> $GITHUB_ENV

      # 13. 生成 Release 标签
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag::$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "Build Date: $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
          echo "Device Name: ${{ env.DEVICE_NAME }}" >> release.txt
          echo "Firmware Version: ${{ env.REPO_BRANCH }}" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      # 14. 上传固件到 Release
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.COMPRESSED_FIRMWARE }}

      # 15. 删除旧的工作流运行记录
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      # 16. 删除旧的 Release
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.2
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
